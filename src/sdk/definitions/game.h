#pragma once

enum button_flags_t : unsigned int
{
    IN_ATTACK    = 1 << 0,
    IN_JUMP      = 1 << 1,
    IN_DUCK      = 1 << 2,
    IN_FORWARD   = 1 << 3,
    IN_BACK      = 1 << 4,
    IN_USE       = 1 << 5,
    IN_CANCEL    = 1 << 6,
    IN_LEFT      = 1 << 7,
    IN_RIGHT     = 1 << 8,
    IN_MOVELEFT  = 1 << 9,
    IN_MOVERIGHT = 1 << 10,
    IN_ATTACK2   = 1 << 11,
    IN_RUN       = 1 << 12,
    IN_RELOAD    = 1 << 13,
    IN_ALT1      = 1 << 14,
    IN_ALT2      = 1 << 15,
    IN_SCORE     = 1 << 16,
    IN_SPEED     = 1 << 17,
    IN_WALK      = 1 << 18,
    IN_ZOOM      = 1 << 19,
    IN_WEAPON1   = 1 << 20,
    IN_WEAPON2   = 1 << 21,
    IN_BULLRUSH  = 1 << 22,
    IN_GRENADE1  = 1 << 23,
    IN_GRENADE2  = 1 << 24,
    IN_ATTACK3   = 1 << 25,
};

enum player_flags_t : unsigned int
{
    FL_ONGROUND   = 1 << 0,
    FL_DUCKING    = 1 << 1,
    FL_WATERJUMP  = 1 << 2,
    FL_ONTRAIN    = 1 << 3,
    FL_INRAIN     = 1 << 4,
    FL_FROZEN     = 1 << 5,
    FL_ATCONTROLS = 1 << 6,
    FL_CLIENT     = 1 << 7,
    FL_FAKECLIENT = 1 << 8,
};

enum class water_level_t : uint8_t
{
    WL_NotInWater = 0,
    WL_Feet,
    WL_Waist,
    WL_Eyes
};

enum material_var_flags_t
{
    MATERIAL_VAR_DEBUG                = (1 << 0),
    MATERIAL_VAR_NO_DEBUG_OVERRIDE    = (1 << 1),
    MATERIAL_VAR_NO_DRAW              = (1 << 2),
    MATERIAL_VAR_USE_IN_FILLRATE_MODE = (1 << 3),

    MATERIAL_VAR_VERTEXCOLOR = (1 << 4),
    MATERIAL_VAR_VERTEXALPHA = (1 << 5),
    MATERIAL_VAR_SELFILLUM   = (1 << 6),
    MATERIAL_VAR_ADDITIVE    = (1 << 7),
    MATERIAL_VAR_ALPHATEST   = (1 << 8),
    //	MATERIAL_VAR_UNUSED					  = (1 << 9),
    MATERIAL_VAR_ZNEARER      = (1 << 10),
    MATERIAL_VAR_MODEL        = (1 << 11),
    MATERIAL_VAR_FLAT         = (1 << 12),
    MATERIAL_VAR_NOCULL       = (1 << 13),
    MATERIAL_VAR_NOFOG        = (1 << 14),
    MATERIAL_VAR_IGNOREZ      = (1 << 15),
    MATERIAL_VAR_DECAL        = (1 << 16),
    MATERIAL_VAR_ENVMAPSPHERE = (1 << 17), // OBSOLETE
    //	MATERIAL_VAR_UNUSED					  = (1 << 18),
    MATERIAL_VAR_ENVMAPCAMERASPACE        = (1 << 19), // OBSOLETE
    MATERIAL_VAR_BASEALPHAENVMAPMASK      = (1 << 20),
    MATERIAL_VAR_TRANSLUCENT              = (1 << 21),
    MATERIAL_VAR_NORMALMAPALPHAENVMAPMASK = (1 << 22),
    MATERIAL_VAR_NEEDS_SOFTWARE_SKINNING  = (1 << 23), // OBSOLETE
    MATERIAL_VAR_OPAQUETEXTURE            = (1 << 24),
    MATERIAL_VAR_ENVMAPMODE               = (1 << 25), // OBSOLETE
    MATERIAL_VAR_SUPPRESS_DECALS          = (1 << 26),
    MATERIAL_VAR_HALFLAMBERT              = (1 << 27),
    MATERIAL_VAR_WIREFRAME                = (1 << 28),
    MATERIAL_VAR_ALLOWALPHATOCOVERAGE     = (1 << 29),
    MATERIAL_VAR_ALPHA_MODIFIED_BY_PROXY  = (1 << 30),
    MATERIAL_VAR_VERTEXFOG                = (1 << 31),

    // NOTE: Only add flags here that either should be read from
    // .vmts or can be set directly from client code. Other, internal
    // flags should to into the flag enum in IMaterialInternal.h
};

enum class e_class_ids : int
{
    CAI_BaseNPC = 0,
    CAK47,
    CBaseAnimating,
    CBaseAnimatingOverlay,
    CBaseAttributableItem,
    CBaseButton,
    CBaseCombatCharacter,
    CBaseCombatWeapon,
    CBaseCSGrenade,
    CBaseCSGrenadeProjectile,
    CBaseDoor,
    CBaseEntity,
    CBaseFlex,
    CBaseGrenade,
    CBaseParticleEntity,
    CBasePlayer,
    CBasePropDoor,
    CBaseTeamObjectiveResource,
    CBaseTempEntity,
    CBaseToggle,
    CBaseTrigger,
    CBaseViewModel,
    CBaseVPhysicsTrigger,
    CBaseWeaponWorldModel,
    CBeam,
    CBeamSpotlight,
    CBoneFollower,
    CBRC4Target,
    CBreachCharge,
    CBreachChargeProjectile,
    CBreakableProp,
    CBreakableSurface,
    CBumpMine,
    CBumpMineProjectile,
    CC4,
    CCascadeLight,
    CChicken,
    CColorCorrection,
    CColorCorrectionVolume,
    CCSGameRulesProxy,
    CCSPlayer,
    CCSPlayerResource,
    CCSRagdoll,
    CCSTeam,
    CDangerZone,
    CDangerZoneController,
    CDEagle,
    CDecoyGrenade,
    CDecoyProjectile,
    CDrone,
    CDronegun,
    CDynamicLight,
    CDynamicProp,
    CEconEntity,
    CEconWearable,
    CEmbers,
    CEntityDissolve,
    CEntityFlame,
    CEntityFreezing,
    CEntityParticleTrail,
    CEnvAmbientLight,
    CEnvDetailController,
    CEnvDOFController,
    CEnvGasCanister,
    CEnvParticleScript,
    CEnvProjectedTexture,
    CEnvQuadraticBeam,
    CEnvScreenEffect,
    CEnvScreenOverlay,
    CEnvTonemapController,
    CEnvWind,
    CFEPlayerDecal,
    CFireCrackerBlast,
    CFireSmoke,
    CFireTrail,
    CFish,
    CFists,
    CFlashbang,
    CFogController,
    CFootstepControl,
    CFunc_Dust,
    CFunc_LOD,
    CFuncAreaPortalWindow,
    CFuncBrush,
    CFuncConveyor,
    CFuncLadder,
    CFuncMonitor,
    CFuncMoveLinear,
    CFuncOccluder,
    CFuncReflectiveGlass,
    CFuncRotating,
    CFuncSmokeVolume,
    CFuncTrackTrain,
    CGameRulesProxy,
    CGrassBurn,
    CHandleTest,
    CHEGrenade,
    CHostage,
    CHostageCarriableProp,
    CIncendiaryGrenade,
    CInferno,
    CInfoLadderDismount,
    CInfoMapRegion,
    CInfoOverlayAccessor,
    CItem_Healthshot,
    CItemCash,
    CItemDogtags,
    CKnife,
    CKnifeGG,
    CLightGlow,
    CMapVetoPickController,
    CMaterialModifyControl,
    CMelee,
    CMolotovGrenade,
    CMolotovProjectile,
    CMovieDisplay,
    CParadropChopper,
    CParticleFire,
    CParticlePerformanceMonitor,
    CParticleSystem,
    CPhysBox,
    CPhysBoxMultiplayer,
    CPhysicsProp,
    CPhysicsPropMultiplayer,
    CPhysMagnet,
    CPhysPropAmmoBox,
    CPhysPropLootCrate,
    CPhysPropRadarJammer,
    CPhysPropWeaponUpgrade,
    CPlantedC4,
    CPlasma,
    CPlayerPing,
    CPlayerResource,
    CPointCamera,
    CPointCommentaryNode,
    CPointWorldText,
    CPoseController,
    CPostProcessController,
    CPrecipitation,
    CPrecipitationBlocker,
    CPredictedViewModel,
    CProp_Hallucination,
    CPropCounter,
    CPropDoorRotating,
    CPropJeep,
    CPropVehicleDriveable,
    CRagdollManager,
    CRagdollProp,
    CRagdollPropAttached,
    CRopeKeyframe,
    CSCAR17,
    CSceneEntity,
    CSensorGrenade,
    CSensorGrenadeProjectile,
    CShadowControl,
    CSlideshowDisplay,
    CSmokeGrenade,
    CSmokeGrenadeProjectile,
    CSmokeStack,
    CSnowball,
    CSnowballPile,
    CSnowballProjectile,
    CSpatialEntity,
    CSpotlightEnd,
    CSprite,
    CSpriteOriented,
    CSpriteTrail,
    CStatueProp,
    CSteamJet,
    CSun,
    CSunlightShadowControl,
    CSurvivalSpawnChopper,
    CTablet,
    CTeam,
    CTeamplayRoundBasedRulesProxy,
    CTEArmorRicochet,
    CTEBaseBeam,
    CTEBeamEntPoint,
    CTEBeamEnts,
    CTEBeamFollow,
    CTEBeamLaser,
    CTEBeamPoints,
    CTEBeamRing,
    CTEBeamRingPoint,
    CTEBeamSpline,
    CTEBloodSprite,
    CTEBloodStream,
    CTEBreakModel,
    CTEBSPDecal,
    CTEBubbles,
    CTEBubbleTrail,
    CTEClientProjectile,
    CTEDecal,
    CTEDust,
    CTEDynamicLight,
    CTEEffectDispatch,
    CTEEnergySplash,
    CTEExplosion,
    CTEFireBullets,
    CTEFizz,
    CTEFootprintDecal,
    CTEFoundryHelpers,
    CTEGaussExplosion,
    CTEGlowSprite,
    CTEImpact,
    CTEKillPlayerAttachments,
    CTELargeFunnel,
    CTEMetalSparks,
    CTEMuzzleFlash,
    CTEParticleSystem,
    CTEPhysicsProp,
    CTEPlantBomb,
    CTEPlayerAnimEvent,
    CTEPlayerDecal,
    CTEProjectedDecal,
    CTERadioIcon,
    CTEShatterSurface,
    CTEShowLine,
    CTesla,
    CTESmoke,
    CTESparks,
    CTESprite,
    CTESpriteSpray,
    CTest_ProxyToggle_Networkable,
    CTestTraceline,
    CTEWorldDecal,
    CTriggerPlayerMovement,
    CTriggerSoundOperator,
    CVGuiScreen,
    CVoteController,
    CWaterBullet,
    CWaterLODControl,
    CWeaponAug,
    CWeaponAWP,
    CWeaponBaseItem,
    CWeaponBizon,
    CWeaponCSBase,
    CWeaponCSBaseGun,
    CWeaponCycler,
    CWeaponElite,
    CWeaponFamas,
    CWeaponFiveSeven,
    CWeaponG3SG1,
    CWeaponGalil,
    CWeaponGalilAR,
    CWeaponGlock,
    CWeaponHKP2000,
    CWeaponM249,
    CWeaponM3,
    CWeaponM4A1,
    CWeaponMAC10,
    CWeaponMag7,
    CWeaponMP5Navy,
    CWeaponMP7,
    CWeaponMP9,
    CWeaponNegev,
    CWeaponNOVA,
    CWeaponP228,
    CWeaponP250,
    CWeaponP90,
    CWeaponSawedoff,
    CWeaponSCAR20,
    CWeaponScout,
    CWeaponSG550,
    CWeaponSG552,
    CWeaponSG556,
    CWeaponShield,
    CWeaponSSG08,
    CWeaponTaser,
    CWeaponTec9,
    CWeaponTMP,
    CWeaponUMP45,
    CWeaponUSP,
    CWeaponXM1014,
    CWeaponZoneRepulsor,
    CWorld,
    CWorldVguiText,
    DustTrail,
    MovieExplosion,
    ParticleSmokeGrenade,
    RocketTrail,
    SmokeTrail,
    SporeExplosion,
    SporeTrail,
};

enum render_flags : unsigned int
{
    STUDIO_NONE                     = 0x00000000,
    STUDIO_RENDER                   = 0x00000001,
    STUDIO_VIEWXFORMATTACHMENTS     = 0x00000002,
    STUDIO_DRAWTRANSLUCENTSUBMODELS = 0x00000004,
    STUDIO_TWOPASS                  = 0x00000008,
    STUDIO_STATIC_LIGHTING          = 0x00000010,
    STUDIO_WIREFRAME                = 0x00000020,
    STUDIO_ITEM_BLINK               = 0x00000040,
    STUDIO_NOSHADOWS                = 0x00000080,
    STUDIO_WIREFRAME_VCOLLIDE       = 0x00000100,
    STUDIO_NOLIGHTING_OR_CUBEMAP    = 0x00000200,
    STUDIO_SKIP_FLEXES              = 0x00000400,
    STUDIO_DONOTMODIFYSTENCILSTATE  = 0x00000800,
    STUDIO_SKIP_DECALS              = 0x10000000,
    STUDIO_SHADOWTEXTURE            = 0x20000000,
    STUDIO_SHADOWDEPTHTEXTURE       = 0x40000000,
    STUDIO_TRANSPARENCY             = 0x80000000
};

enum class shader_stencil_op_t : int
{
    SHADER_STENCILOP_KEEP             = 1,
    SHADER_STENCILOP_ZERO             = 2,
    SHADER_STENCILOP_SET_TO_REFERENCE = 3,
    SHADER_STENCILOP_INCREMENT_CLAMP  = 4,
    SHADER_STENCILOP_DECREMENT_CLAMP  = 5,
    SHADER_STENCILOP_INVERT           = 6,
    SHADER_STENCILOP_INCREMENT_WRAP   = 7,
    SHADER_STENCILOP_DECREMENT_WRAP   = 8,

    SHADER_STENCILOP_FORCE_DWORD = 0x7fffffff
};

enum class shader_stencil_func_t : int
{
    SHADER_STENCILFUNC_NEVER    = 1,
    SHADER_STENCILFUNC_LESS     = 2,
    SHADER_STENCILFUNC_EQUAL    = 3,
    SHADER_STENCILFUNC_LEQUAL   = 4,
    SHADER_STENCILFUNC_GREATER  = 5,
    SHADER_STENCILFUNC_NOTEQUAL = 6,
    SHADER_STENCILFUNC_GEQUAL   = 7,
    SHADER_STENCILFUNC_ALWAYS   = 8,

    SHADER_STENCILFUNC_FORCE_DWORD = 0x7fffffff
};

enum class move_type_t : uint8_t
{
    MOVETYPE_NONE = 0,
    MOVETYPE_ISOMETRIC,
    MOVETYPE_WALK,
    MOVETYPE_STEP,
    MOVETYPE_FLY,
    MOVETYPE_FLYGRAVITY,
    MOVETYPE_VPHYSICS,
    MOVETYPE_PUSH,
    MOVETYPE_NOCLIP,
    MOVETYPE_LADDER,
    MOVETYPE_OBSERVER,
    MOVETYPE_CUSTOM,
    MOVETYPE_LAST     = MOVETYPE_CUSTOM,
    MOVETYPE_MAX_BITS = 4
};

enum class client_frame_stage_t : int
{
    // (haven't run any frames yet)
    FRAME_UNDEFINED = -1,
    FRAME_START,
    // A network packet is being recieved
    FRAME_NET_UPDATE_START,
    // Data has been received and we're going to start calling PostDataUpdate
    FRAME_NET_UPDATE_POSTDATAUPDATE_START,
    // Data has been received and we've called PostDataUpdate on all data recipients
    FRAME_NET_UPDATE_POSTDATAUPDATE_END,
    // We've received all packets, we can now do interpolation, prediction, etc..
    FRAME_NET_UPDATE_END,
    // We're about to start rendering the scene
    FRAME_RENDER_START,
    // We've finished rendering the scene.
    FRAME_RENDER_END
};

enum class item_definition_index : short
{
    INVALID     = -1,
    WEAPON_NONE = 0,
    WEAPON_DEAGLE,
    WEAPON_ELITE,
    WEAPON_FIVESEVEN,
    WEAPON_GLOCK,
    WEAPON_AK47 = 7,
    WEAPON_AUG,
    WEAPON_AWP,
    WEAPON_FAMAS,
    WEAPON_G3SG1,
    WEAPON_GALILAR = 13,
    WEAPON_M249,
    WEAPON_M4A1 = 16,
    WEAPON_MAC10,
    WEAPON_P90 = 19,
    WEAPON_MP5 = 23,
    WEAPON_UMP45,
    WEAPON_XM1014,
    WEAPON_BIZON,
    WEAPON_MAG7,
    WEAPON_NEGEV,
    WEAPON_SAWEDOFF,
    WEAPON_TEC9,
    WEAPON_TASER,
    WEAPON_HKP2000,
    WEAPON_MP7,
    WEAPON_MP9,
    WEAPON_NOVA,
    WEAPON_P250,
    WEAPON_SHIELD,
    WEAPON_SCAR20,
    WEAPON_SG556,
    WEAPON_SSG08,
    WEAPON_KNIFEGG,
    WEAPON_KNIFE,
    WEAPON_FLASHBANG,
    WEAPON_HEGRENADE,
    WEAPON_SMOKEGRENADE,
    WEAPON_MOLOTOV,
    WEAPON_DECOY,
    WEAPON_INCGRENADE,
    WEAPON_C4,
    WEAPON_HEALTHSHOT = 57,
    WEAPON_KNIFE_T    = 59,
    WEAPON_M4A1_SILENCER,
    WEAPON_USP_SILENCER,
    WEAPON_CZ75A = 63,
    WEAPON_REVOLVER,
    WEAPON_TAGRENADE = 68,
    WEAPON_FISTS,
    WEAPON_BREACHCHARGE,
    WEAPON_TABLET = 72,
    WEAPON_MELEE  = 74,
    WEAPON_AXE,
    WEAPON_HAMMER,
    WEAPON_SPANNER     = 78,
    WEAPON_KNIFE_GHOST = 80,
    WEAPON_FIREBOMB,
    WEAPON_DIVERSION,
    WEAPON_FRAG_GRENADE,
    WEAPON_SNOWBALL,
    WEAPON_BUMPMINE,
    WEAPON_KNIFE_BAYONET = 500,
    WEAPON_KNIFE_CSS     = 503,
    WEAPON_KNIFE_FLIP    = 505,
    WEAPON_KNIFE_GUT,
    WEAPON_KNIFE_KARAMBIT,
    WEAPON_KNIFE_M9_BAYONET,
    WEAPON_KNIFE_TACTICAL,
    WEAPON_KNIFE_FALCHION       = 512,
    WEAPON_KNIFE_SURVIVAL_BOWIE = 514,
    WEAPON_KNIFE_BUTTERFLY,
    WEAPON_KNIFE_PUSH,
    WEAPON_KNIFE_CORD  = 517,
    WEAPON_KNIFE_CANIS = 518,
    WEAPON_KNIFE_URSUS = 519,
    WEAPON_KNIFE_GYPSY_JACKKNIFE,
    WEAPON_KNIFE_OUTDOOR  = 521,
    WEAPON_KNIFE_STILETTO = 522,
    WEAPON_KNIFE_WIDOWMAKER,
    WEAPON_KNIFE_SKELETON    = 525,
    GLOVE_STUDDED_BLOODHOUND = 5027,
    GLOVE_T_SIDE             = 5028,
    GLOVE_CT_SIDE            = 5029,
    GLOVE_SPORTY             = 5030,
    GLOVE_SLICK              = 5031,
    GLOVE_LEATHER_WRAP       = 5032,
    GLOVE_MOTORCYCLE         = 5033,
    GLOVE_SPECIALIST         = 5034,
    GLOVE_HYDRA              = 5035
};

enum class hitbox_t : int
{
    HITBOX_HEAD = 0,
    HITBOX_NECK,
    HITBOX_PELVIS,
    HITBOX_STOMACH,
    HITBOX_LOWER_CHEST,
    HITBOX_CHEST,
    HITBOX_UPPER_CHEST,
    HITBOX_RIGHT_THIGH,
    HITBOX_LEFT_THIGH,
    HITBOX_RIGHT_CALF,
    HITBOX_LEFT_CALF,
    HITBOX_RIGHT_FOOT,
    HITBOX_LEFT_FOOT,
    HITBOX_RIGHT_HAND,
    HITBOX_LEFT_HAND,
    HITBOX_RIGHT_UPPER_ARM,
    HITBOX_RIGHT_FOREARM,
    HITBOX_LEFT_UPPER_ARM,
    HITBOX_LEFT_FOREARM,
    HITBOX_COUNT,
};